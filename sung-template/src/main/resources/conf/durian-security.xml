<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.2.xsd
                        http://www.springframework.org/schema/util
                        http://www.springframework.org/schema/util/spring-util-3.2.xsd">  

    <bean id="shiroRealm" class="com.nssoft.security.ShiroRealm"/>  
  
    <!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->  
    <!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 --> 
     
    <!-- 缓存管理器 使用Ehcache实现 -->  
	<bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">  
	    <property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml"/>  
	</bean>
     
    <!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
        <property name="realm" ref="shiroRealm"/>  
       	<!-- 单点登录 -->
        <!-- <property name="subjectFactory" ref="casSubjectFactory"></property> -->
        <property name="cacheManager" ref="shiroEhcacheManager"></property>
    </bean>  
  
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
    		<!-- <property name="filters">  
	        <util:map>  
	            <entry key="authc" value-ref="globalFilter" />  
	            <entry key="roles" value-ref="globalFilter" />  
	            <entry key="perms" value-ref="globalFilter" />  
	        </util:map>  
    		</property>  -->
        <!-- Shiro的核心安全接口,这个属性是必须的 -->  
        <property name="securityManager" ref="securityManager"/>  
        <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->  
        <property name="loginUrl" value="/v1/api/error/no-login.json"/>  
        <!-- 登录成功后要跳转的连接 -->  
        <!-- <property name="successUrl" value="/index.html"/> -->  
        <!-- 用户访问未对其授权的资源时,所显示的连接 -->  
        <property name="unauthorizedUrl" value="/v1/api/error/no-auth.json"/>  
        
        <!-- Shiro连接约束配置,即过滤链的定义http://blog.csdn.net/jadyer/article/details/12172839 -->  
        <property name="filterChainDefinitions">  
            <value>  
            		/login.html = anon
            		/register.html = anon
            		/error/*.html = anon
            		/help/** = anon
            		/v1/open-api/** = anon
            		/v1/api/error/** = anon
            		/v1/api/user/login.json = anon
            		/v1/api/user/register.json = anon
            		/v1/api/user/findpw.json = anon
            		/v1/api/user/logout.json = anon
            		/v1/api/oauth2/** = anon
            		
            		/ = authc
            		/*.html = authc
            		
            		/v1/api/** = authc
            		
                /admin.html = roles["ADMIN"]
                /page-root.html = authc,perms[admin:root]
            </value>  
        </property>  
    </bean>  
  	
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>  
  
    <!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->  
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>  
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
        <property name="securityManager" ref="securityManager"/>  
    </bean>  
    
    
    	<!-- 全局拦截器 -->
	<!-- <mvc:interceptors>
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
		<mvc:interceptor>
			<mvc:mapping path="/v1/api/**" />
			<bean class="com.nssoft.security.GlobalInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors> -->
	
    <!-- <bean id="globalFilter" class="com.nssoft.security.ShiroFilter" />  --> 
    
</beans>  

